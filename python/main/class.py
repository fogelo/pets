""" 
Все сущности в python - это объекты.
Объекты в python - это экземпляры классов
Классы - это шаблоны для объектов
Классы создаются с помощью ключевого слова class, но есть много встроенных классов (str, int, float, list, dict, tuple, set ...)

Экземпляры наследуют атрибуты классов. Экземпляры могут иметь и собственные атрибуты


Магический метод - это метод, который автоматически вызывается в ответ на определенные операции.
Магические методы не вызвают напрямую.


"""

# @ Пример создания класса и экземпляров этого класса


class Car:
    # self - это ссылка на объект (экземпляр), который создается в памяти при создании этого экземпляра класса
    def move(self):
        print("car is moving", self)

    def stop(self):
        print("car is stopped")


# * создание экземпляра класса
car1 = Car()

# * вызов методов
car1.move()  # вызов метода экземпляра. На самом деле self передается автоматически первым аргуметном вот так car1.move(car1)
Car.move(car1)  # вызов метода класса. В этом случае нужно передавать self явно
# Car.stop() # привязанный метод - это метод, который ожидает в качестве первого аргумента экземпляр класса (его нельзя вызвать без аргументов)

print(
    Car.move == car1.move
)  # False, при создании экземпляра создается новая функция move

# @ Пример создания класса с методом __init__

# * cоздание класса с методом __init__


class Dog:
    # __init__ - это магический метод, который автоматически вызывается при вызове Dog(), то есть создании экземпляра класса Dog
    # c помощью метода __init__ определяются собственные атрибуты экземпляра класса
    # __init__ - это аналог функции constructor в js
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def voice(text):
        print("hello")


# * создание экземпляра класса
dog1 = Dog("Брайт", 4)

# * вот так можно убедиться в наличии собственных атрибутов у экземпляра класса
print(dog1.__dict__)

# * вот так можно посмотреть какие атрибуты доступны в целом экземпляру класаа
print(dir(dog1))

# * вот так можно проверить принадлежность экземпялра к классу
# Если вы обращаетесь к определенному атрибуту экземпляра, то движок ищет эти атрибуты по цепочке (как в js)
print(isinstance(dog1, Dog))  # True
print(type(dog1))
print(type(dog1) == Dog)
print(isinstance(dog1, object))


# @ Пример создания класса с атрибутами класса


class Bird:
    # атрибуты класс, можно хранить какую-то общую инфорацию по всем объектам
    bird_count = 0

    def __init__(self):
        Bird.bird_count += 1

    def fly(self):
        print("bird is flying")


bird1 = Bird()
bird2 = Bird()
bird1.bird_count = 10  # изменить значение атрибута класса через экземпляр не получится, будет создано поле на уровне экземпляра
print(bird1.bird_count, Bird.bird_count)


# @ Пример создания класса со статическими методами


class Cat:
    def voice(self):
        print("hello")

    @staticmethod
    def merge_strings(str1, str2):
        return f"{str1} {str2}"


# * использование статических методов из класса
print(Cat.merge_strings("Happy", "Orlov"))

# * использование статических методов из экземпляра
cat1 = Cat()
print(cat1.merge_strings("Milka", "Orlova"))
print(
    cat1.merge_strings == Cat.merge_strings
)  # True, в экземпляре хранится ссылка на метод, то есть метод не копируется в экземпляр
cat1.merge_strings = 1  # так как в экземпляре хранится ссылка на метод класса, то его можно вот так перезаписать


# @ Пример наследования классов


# * создание классов с наследованием
class People:
    people_count = 0

    def __init__(self, name):
        self.name = name
        People.people_count += 1


class User(People):
    user_count = 0

    def __init__(self, name, login):
        super().__init__(
            name
        )  # если требутся атрибуты, которые были определены у родителя вызов метода __init_ родителя
        self.login = login


# * создание экземпляра

user1 = User("anton", "fogelo")

# * вот так можно вывести в терминал свойства и их значения для пользовательского класса
print(vars(user1))
print(user1.__dict__)

# * вот так можно вывести в терминал список подклассов класса
print(People.__subclasses__())
# print(object.__subclasses__())


# @ Пример написания логики для магических методов в классах
# Магические методы - это методы, которые вызываются python при выполнении определенных оперций (например -,+,*,/)


# * создание класса с определением логики для магического метода, который вызывается при использовании оператора +
class Comment:
    def __init__(self, text):
        self.likes = 0
        self.text = text

    def incrementLike(self):
        self.likes += 1

    def __add__(self, other):
        return f"{self.text} {other.text}"


comment1 = Comment("Привет")
comment2 = Comment("мир")

print(comment1 + comment2)
