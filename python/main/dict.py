""" 

dict - словарь, коллекция пар ключ-значение
Порядок объектов        - нет
Изменяемый              - да
Уникальность объектов   - да



Аттрибут и ключ - это не одно и тоже, аттрибуты создаются в init

#вот атрибуты
class MyClass:
    def __init__(self):
        self.attr1 = "value1"
        self.attr2 = "value2"

#а вот ключи        
my_dict = {'key1': 'value1', 'key2': 'value2'}

"""

my_dict = {"name": "Anton", "surname": "Orlov", "age": 33, "married": True}

# * Методы обычные

my_dict_copy = my_dict.copy()  # создает поверхностную копию
my_dict_update = my_dict.update({"age": 18, "city": "Moscow"}) # обновляет словарь, добавляя пары ключ-значение из другого словаря, мутирует исходный
my_dict_setdefault_value = my_dict.setdefault("height", 180) # возвращает значение ключа, если ключ не существует - добавляет, мутирует исходный
my_dict_fromkeys = my_dict.fromkeys(["a","b","c"], 0) # создает новый словарь с ключами из итерируемого объекта и значением по умолчанию для всех ключей
my_dict_pop_value = my_dict.pop("age") # удаляет элемент с указанным ключом и возвращает его значение. Если ключ не будет найден вернет ошибку KeyError, мутирует
my_dict_popitem = my_dict.popitem() # удаляет из словаря последнюю добавленную в него пару ключ-значение и возвращает его 
my_dict_get_value = my_dict.get("name") # возвращает значение по ключу, если ключ не найден возвращает None
my_dict_items = my_dict.items() # возвращает объект представления (view object), который отображает список пар ключ-значение в виде кортежей
my_dict_keys = my_dict.keys() # возвращает объект представления (view object), который отображает список ключенй словаря
my_dict_values = my_dict.values() # возвращает объект представления (view object), который отображает список значений словаря
# my_dict.clear() # очищает словарь



# * Магические методы
my_dict.__delitem__("name") # del my_dict["name"] - удаляет элемент из словаря
my_dict.__setitem__("name", "Anton") # my_dic["name"] = "Anton" - устанавливает значение по ключу
my_dict.__getitem__("name") # my_dict["name"] - получение значения по ключу


my_dict.__or__({"bbb": 123}) # my_dict | {"bbb": 123} - объединение словарей, не мутирует
my_dict.__ror__({"bbb": 123}) # my_dict | {"bbb": 123} - объединение словарей в случае, когда левый операнд не поддерживает данный оператор, а правый операнд поддерживает, не мутирует
my_dict.__ior__({"bbb": 123}) # my_dict |= {"bbb": 123} - встраивает словарь в словарь, мутирует

# my_dict.__reversed__() # не реализован для dict, но можно реализовать
# my_dict.__iter__() # возвращает итератор, по ключам словаря

# * Вроде общие для всех
# my_dict.__new__() # вызывается при создании нового экземпляра класса, (когда вызываем напрмер Car()).  Его основная цель — создать и вернуть новый объект
# my_dict.__init__() # автоматически вызывается после __new__() для инициализации нового экземпляра класса, то есть установки начальных значений атрибутов
# my_dict.__init_subclass__ # вызывается при создании подклассов. Он позволяет выполнять дополнительную настройку классов, когда они наследуются.

#my_dict.__getattribute__("attr1") # получение аттрибута 
#my_dict.__setattr__("height", 180) # предназначен для добавления аттрибута obj.attr1 = 'value1' 
#my_dict.__delattr__('height') # предназначен для удаления атрибутов объекта my_dict.attr1 (именно через точечную нотацию)


my_dict.__contains__("name") # "name" in my_dict - используется для проверки наличия ключа в словаре или элемента в другом типе коллекции 
my_dict.__dir__() # dir(my_dict) - предоставляет списко атрибутов объектов
my_dict.__sizeof__() 
my_dict.__eq__({"aaa":"bbb"})
# my_dict.__ne__
# my_dict.__len__
# my_dict.__repr__
# my_dict.__str__
# my_dict.__format__() # позволяет контролировать, как объект будет представлен в виде строки при форматировании

# my_dict.__subclasshook__
# my_dict.__class_getitem__

# my_dict.__reduce__() # позволяет контролировать, как объект будет разбираться на составляющие для последующей сериализации и восстановления (модуль pickle)
# my_dict.__reduce_ex__() # Разница между __reduce__ и __reduce_ex__ заключается в том, что __reduce_ex__ предоставляет дополнительную поддержку для различных протоколов сериализации
# my_dict.__getstate__ # позволяет контролировать, какие данные объекта будут сериализованы

# my_dict.__hash__() # hash(my_dict) возвращает хэш-значение, реализован только для неизменяемых объектов

# * Специальные свойства 
# my_dict.__doc__ - содержит строку документации для объекта, если она была определена
class MyClass:
    """
    This is the documentation string for MyClass.
    """
    pass

print(MyClass.__doc__)

# my_dict.__module__ - указывает на модуль, в котором был определен класс
print(dict.__module__)

# my_dict.__class__ - указывает на класс объекта.
print(my_dict.__class__)

# my_dict.__annotations__ - используется для хранения аннотаций типов для атрибутов класса, функции или метода
def func(a: int, b: str) -> None:
    pass

print(func.__annotations__)

# my_dict.__qualname__ - (qualified name) указывает на полное имя класса, функции или метода

# my_dict.__dict__ - содержит словарь с атрибутами объекта. Это позволяет получить и изменить атрибуты объекта динамически
class MyClass:
    def __init__(self):
        self.attr1 = "value1"
        self.attr2 = "value2"

obj = MyClass()
print(obj.__dict__)




